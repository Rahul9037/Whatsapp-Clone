{"version":3,"sources":["assets/whatsapplogo.png","firebase.js","components/SidebarChat/SidebarChat.js","contextAPI/StateProvider.js","components/Sidebar/Sidebar.js","components/Chat/Chat.js","Reducer/Reducer.js","components/Login/Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","SidebarChat","id","name","addNewChat","useState","seed","setSeed","messages","setMessages","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","Math","floor","random","onClick","roomName","prompt","add","className","to","Avatar","src","message","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Sidebar","rooms","setRooms","user","unsubscribe","snapShot","photoURL","IconButton","placeholder","type","room","key","Chat","input","setInput","setRoomName","roomId","useParams","length","Date","timestamp","toDate","toUTCString","displayName","onChange","e","target","preventDefault","FieldValue","serverTimestamp","actionTypes","state","action","Login","dispatch","logo","alt","width","height","Button","signInWithPopup","then","result","catch","err","alert","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.1e41e0b9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/whatsapplogo.3a8dad7f.png\";","import firebase from \"firebase\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDGkizySGTPLroX3VHp3AtROMgTa9ZgQLE\",\n    authDomain: \"whatsapp-clone-7e894.firebaseapp.com\",\n    databaseURL: \"https://whatsapp-clone-7e894.firebaseio.com\",\n    projectId: \"whatsapp-clone-7e894\",\n    storageBucket: \"whatsapp-clone-7e894.appspot.com\",\n    messagingSenderId: \"643972952893\",\n    appId: \"1:643972952893:web:d745e132f44bf39f454b54\",\n    measurementId: \"G-SRHC4RT10G\"\n  };\n\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\n  const db = firebaseApp.firestore();\n  const auth = firebase.auth();\n  const provider = new firebase.auth.GoogleAuthProvider();\n\n  export { auth , provider};\n  export default db;","import React, { useState, useEffect } from 'react';\nimport { Avatar } from '@material-ui/core';\nimport './SidebarChat.css';\nimport db from '../../firebase';\nimport { Link } from 'react-router-dom';\n\nfunction SidebarChat({ id, name, addNewChat }) {\n    const [seed, setSeed] = useState('');\n    const [messages, setMessages] = useState([]);\n\n    useEffect(() => {\n        if(id){\n            db.collection('rooms').doc(id).collection('messages')\n            .orderBy(\"timestamp\", \"desc\")\n            .onSnapshot(snapshot => (\n                setMessages(snapshot.docs.map((doc) => doc.data()))\n            ))\n        }\n    }, [id])\n\n    useEffect(() => {\n        setSeed(Math.floor(Math.random() * 5000));\n    }, [])\n\n    const createChat = () => {\n        const roomName = prompt('Please enter the name for chat');\n\n        if (roomName) {\n            db.collection('rooms').add({\n                name: roomName\n            })\n        }\n    }\n    return !addNewChat ? (\n        <Link to={`/rooms/${id}`}>\n            <div className=\"sidebarChat\">\n                <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\n                <div className=\"sidebarChat__info\">\n                    <h2>{name}</h2>\n                    <p>{messages[0]?.message}</p>\n                </div>\n            </div>\n        </Link>\n    ) : (\n            <div onClick={createChat}\n                className=\"sidebarChat\">\n                <h2>Add New Chat</h2>\n            </div>\n        )\n}\n\nexport default SidebarChat\n","import React, { createContext, useContext, useReducer } from 'react';\n\nexport const StateContext = createContext();\n\nexport const StateProvider = ({ reducer, initialState, children }) => (\n    <StateContext.Provider value={useReducer(reducer,initialState)}>\n        {children}\n    </StateContext.Provider>\n);\n\nexport const useStateValue = () => useContext(StateContext);\n","import React, { useState ,useEffect} from 'react';\nimport { Avatar, IconButton } from '@material-ui/core';\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge';\nimport ChatIcon from '@material-ui/icons/Chat';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport SearchIcon from '@material-ui/icons/Search';\nimport SidebarChat from '../SidebarChat/SidebarChat';\nimport { useStateValue } from '../../contextAPI/StateProvider';\nimport db from '../../firebase';\nimport './Sidebar.css';\n\nfunction Sidebar() {\n\n    const [rooms,setRooms] = useState([]);\n    const [{user} , dispatch] = useStateValue();\n\n    useEffect(() => {\n        const unsubscribe = db.collection('rooms').onSnapshot( snapShot => {\n            setRooms(\n                snapShot.docs.map((doc) => ({\n                    id : doc.id,\n                    data : doc.data(),\n                }))\n                )\n        });\n\n        return () => {\n            unsubscribe();\n        }\n    }, [])\n    return (\n        <div className=\"sidebar\">\n            <div className=\"sidebar__header\">\n                <Avatar src={user?.photoURL}/>\n                <div className=\"sidebar__headerRight\">\n                    <IconButton>\n                        <DonutLargeIcon />\n                    </IconButton>\n                    <IconButton>\n                        <ChatIcon />\n                    </IconButton>\n                    <IconButton>\n                        <MoreVertIcon />\n                    </IconButton>\n                </div>\n            </div>\n            <div className=\"sidebar__search\">\n                <div className=\"sidebar__searchContainer\">\n                    <SearchIcon />\n                    <input placeholder=\"Search or Start a new chat\" type=\"text\" />\n                </div>\n\n            </div>\n            <div className=\"sidebar__chats\">\n                <SidebarChat addNewChat/>\n                {rooms.map( room => {\n                   return <SidebarChat key={room.id} id={room.id} name={room.data.name}/>\n                })}\n            </div>\n        </div>\n    );\n}\n\nexport default Sidebar;","import React, { useState, useEffect } from 'react';\nimport './Chat.css';\nimport { Avatar, IconButton } from '@material-ui/core';\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport SearchIcon from '@material-ui/icons/Search';\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions';\nimport MicIcon from '@material-ui/icons/Mic';\nimport { useParams } from 'react-router-dom';\nimport { useStateValue } from '../../contextAPI/StateProvider';\nimport firebase from \"firebase\";\nimport db from '../../firebase';\n\nfunction Chat() {\n\n    const [input, setInput] = useState('');\n    const [roomName, setRoomName] = useState('');\n    const { roomId } = useParams();\n    const [seed, setSeed] = useState('');\n    const [messages, setMessages] = useState([]);\n    const [{user} , dispatch] = useStateValue();\n\n    useEffect(() => {\n        setSeed(Math.floor(Math.random() * 5000));\n    }, [roomId])\n\n    useEffect(() => {\n        if (roomId) {\n            db.collection('rooms').doc(roomId)\n                .onSnapshot(\n                    snapShot => (setRoomName(snapShot.data().name))\n                )\n            db.collection('rooms').doc(roomId).collection('messages')\n                .orderBy('timestamp', 'asc').onSnapshot(\n                    snapShot => (setMessages(snapShot.docs.map\n                        (doc => doc.data())\n                    )))\n        }\n    }, [roomId])\n\n    const sendMessage = (e) => {\n        e.preventDefault();\n        //to sent message\n        db.collection('rooms').doc(roomId)\n        .collection('messages').add({\n            message : input,\n            name: user.displayName,\n            timestamp : firebase.firestore.FieldValue.serverTimestamp(),\n        })\n        setInput('');\n    }\n    return (\n        <div className=\"chat\">\n            <div className=\"chat__header\">\n                <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\n                <div className=\"chat__headerInfo\">\n                    <h3>{roomName}</h3>\n                    {messages.length > 0 ? (<p>Last message at{\" \"}\n                        {new Date( messages[messages.length - 1]?.timestamp?.toDate()).toUTCString()}\n                    </p>) : null}\n                </div>\n                <div className=\"chat_headerRight\">\n                    <IconButton>\n                        <SearchIcon />\n                    </IconButton>\n                    <IconButton>\n                        <AttachFileIcon />\n                    </IconButton>\n                    <IconButton>\n                        <MoreVertIcon />\n                    </IconButton>\n                </div>\n            </div>\n            <div className=\"chat__body\">\n                {messages.map(message => \n                    (<p key={message} className={`chat__message ${message.name === user.displayName && `chat__reciever`}`}>\n                        <span className=\"chat__name\">{message.name}</span>\n                            {message.message}\n                        <span className=\"chat__timestamp\">\n                            {\n                                new Date(message.timestamp?.toDate()).toUTCString()\n                            }\n                        </span>\n                    </p>))}\n\n            </div>\n            <div className=\"chat__footer\">\n                <EmojiEmotionsIcon />\n                <form>\n                    <input onChange={(e) => setInput(e.target.value)} placeholder=\"Type a message\" type=\"text\" value={input} />\n                    <button type=\"submit\" onClick={sendMessage}>Sent Message</button>\n                </form>\n                <MicIcon />\n            </div>\n        </div>\n    )\n}\n\nexport default Chat\n","export const initialState = {\n    user : null,\n};\n\nexport const actionTypes = {\n    SET_USER : \"SET_USER\",\n};\n\nconst reducer = (state,action) => {\n    switch(action.type){\n        case actionTypes.SET_USER :\n            return {\n                ...state,\n                user : action.user,\n            };\n        default :\n            return state    \n    }\n};\n\nexport default reducer;","import React from 'react';\nimport { Button } from '@material-ui/core';\nimport './Login.css';\nimport {auth, provider } from '../../firebase';\nimport { useStateValue } from '../../contextAPI/StateProvider';\nimport { actionTypes } from '../../Reducer/Reducer';\nimport logo from '../../assets/whatsapplogo.png';\n\nfunction Login() {\n\n    const [{} , dispatch] = useStateValue();\n\n    const signIn = () =>{\n        auth.signInWithPopup(provider)\n        .then( (result) => {\n            dispatch({\n                type : actionTypes.SET_USER,\n                user : result.user,\n            });\n        } )\n        .catch(err => alert(err.message));\n    }\n    return (\n        <div className=\"login \"> \n            <div className=\"login__container\">\n                <img src={logo}\n                 alt=\"\" width=\"500px\" height=\"500px\"/>\n                <div className=\"login__text\">\n                    <h1>SignIn to Whatsapp</h1>\n                </div>\n                <Button onClick={signIn}>\n                    SignIn with Google\n                </Button>\n            </div>\n        </div>\n    )\n}\n\nexport default Login\n","import React from 'react';\nimport Sidebar from './components/Sidebar/Sidebar';\nimport Chat from './components/Chat/Chat';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Login from './components/Login/Login';\nimport { useStateValue } from './contextAPI/StateProvider';\nimport './App.css';\n\nfunction App() {\n  const [{user} , dispatch] = useStateValue();\n  return (\n    //BEM naming convention!!\n    <div className=\"app\">\n     { !user ? \n     ( <Login />) \n     : (<div className=\"app__body\">\n        <Router>\n          <Sidebar />\n          <Switch>\n            <Route path=\"/rooms/:roomId\">\n              <Chat />\n            </Route>\n          </Switch>\n        </Router>\n      </div>)}\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {StateProvider} from './contextAPI/StateProvider';\nimport reducer , { initialState } from './Reducer/Reducer';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState}\n    reducer={reducer}>\n    <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}